{"version":3,"sources":["jquery.dirtyforms.dialogs.facebox.min.js"],"names":["$","window","document","undefined","DirtyForms","dialog","title","proceedButtonClass","proceedButtonText","stayButtonClass","stayButtonText","stashSelector","open","choice","message","ignoreClass","content","this","facebox","bindEnterKey","staySelector","proceedSelector","isDF1","close","decision","e","type","which","dialogStash","trigger","decidingCancel","bind","click","decidingContinue","continuing","unstashing","stash","isDeciding","$fb","$content","find","not","each","storeFieldValue","trim","html","css","clone","children","unstash","ev","fire","selector","refire","$field","is","$option","attr","removeAttr","text","val","jQuery"],"mappings":";;;;;CAMA,SAAUA,EAAGC,EAAQC,EAAUC,GAQ3BH,EAAEI,WAAWC,QAETC,MAAO,oCACPC,mBAAoB,GACpBC,kBAAmB,kBACnBC,gBAAiB,GACjBC,eAAgB,YAKhBC,cAAe,oBACfC,KAAM,SAAUC,EAAQC,EAASC,GAC7B,GAAIC,GACA,OAASC,KAAKX,MAAQ,WACdQ,EAAU,2CAEwBC,EAAc,IAAME,KAAKV,mBAAqB,KAAOU,KAAKT,kBAAoB,qCACjFO,EAAc,IAAME,KAAKR,gBAAkB,KAAOQ,KAAKP,eAAiB,UASnH,IAPAV,EAAEkB,QAAQF,GAGVH,EAAOM,cAAe,EACtBN,EAAOO,aAAe,0DACtBP,EAAOQ,gBAAkB,0BAErBR,EAAOS,MAAO,CACd,GAAIC,GAAQ,SAAUC,GAClB,MAAO,UAAUC,IACE,YAAXA,EAAEC,MAAkC,YAAXD,EAAEC,OAAkC,IAAXD,EAAEE,OAA0B,IAAXF,EAAEE,UAGhE3B,EAAEI,WAAWwB,aACd5B,EAAEE,GAAU2B,QAAQ,iBAExBL,EAASC,MAIjBK,EAAiB9B,EAAEI,WAAW0B,cAClC9B,GAAEE,GAAU6B,KAAK,kBAAmBR,EAAMO,IAC1C9B,EAAEa,EAAOO,cAAcY,MAAMT,EAAMO,IACnC9B,EAAEa,EAAOQ,iBAAiBW,MAAMT,EAAMvB,EAAEI,WAAW6B,qBAG3DV,MAAO,SAAUW,EAAYC,GAGpBA,GACDnC,EAAEE,GAAU2B,QAAQ,kBAG5BO,MAAO,WACH,GAAId,GAA2C,kBAA5BtB,GAAEI,WAAWiC,WAC5BC,EAAMtC,EAAE,YACRuC,EAAWD,EAAIE,KAAK,WAOxB,OAJAD,GAASC,KAAK,kCAAkCC,IAAI,iEAAiEC,KAAK,WACtHC,EAAgB3C,EAAEiB,SAGS,KAAvBjB,EAAE4C,KAAKN,EAAIO,SAAwC,SAAtBP,EAAIQ,IAAI,YACzC,EACAxB,EACIiB,EAASQ,OAAM,GACfR,EAASS,WAAWD,OAAM,IAEtCE,QAAS,SAAUb,EAAOc,GACtBlD,EAAEkB,QAAQkB,IAIde,KAAM,SAAUrC,EAASR,GACrBW,KAAKX,MAAQA,EACbW,KAAKL,MAAOU,OAAO,GAAQR,EAASd,EAAEI,WAAWW,cAErDqC,SAAUpD,EAAEI,WAAWC,OAAOM,cAG9BoB,KAAM,aAENsB,OAAQ,SAAUrC,EAASkC,GACvBjC,KAAKgC,QAAQjC,EAASkC,IAI9B,IAAIP,GAAkB,SAAUW,GACxBA,EAAOC,GAAG,mBACVD,EAAOd,KAAK,UAAUE,KAAK,WACvB,GAAIc,GAAUxD,EAAEiB,KACZuC,GAAQD,GAAG,aACXC,EAAQC,KAAK,WAAY,YAEzBD,EAAQE,WAAW,cAGpBJ,EAAOC,GAAG,oBACbD,EAAOC,GAAG,YACVD,EAAOG,KAAK,UAAW,WAEvBH,EAAOI,WAAW,WAEfJ,EAAOC,GAAG,YACjBD,EAAOK,KAAKL,EAAOM,OAEnBN,EAAOG,KAAK,QAASH,EAAOM,SAIrCC,OAAQ5D,OAAQC","file":"jquery.dirtyforms.dialogs.facebox.min.js","sourceRoot":"/","sourcesContent":["/*!\nFacebox dialog module (for jQuery Dirty Forms) | v2.0.0 | github.com/snikch/jquery.dirtyforms\n(c) 2015 Shad Storhaug\nLicense MIT\n*/\n\n(function($, window, document, undefined) {\n    // Can't use ECMAScript 5's strict mode because several apps \n    // including ASP.NET trace the stack via arguments.caller.callee \n    // and Firefox dies if you try to trace through \"use strict\" call chains. \n    // See jQuery issue (#13335)\n    // Support: Firefox 18+\n    //\"use strict\";\n\n    $.DirtyForms.dialog = {\n        // Custom properties and methods to allow overriding (may differ per dialog)\n        title: 'Are you sure you want to do that?',\n        proceedButtonClass: '',\n        proceedButtonText: 'Leave This Page',\n        stayButtonClass: '',\n        stayButtonText: 'Stay Here',\n\n        // Typical Dirty Forms Properties and Methods\n\n        // Selector for stashing the content of another dialog.\n        stashSelector: '#facebox .content',\n        open: function (choice, message, ignoreClass) {\n            var content =\n                '<h1>' + this.title + '</h1>' +\n                '<p>' + message + '</p>' +\n                '<p>' +\n                    '<a href=\"#\" class=\"dirty-proceed ' + ignoreClass + ' ' + this.proceedButtonClass + '\">' + this.proceedButtonText + '</a>' +\n                    '<a href=\"#\" class=\"dirty-stay ' + ignoreClass + ' ' + this.stayButtonClass + '\">' + this.stayButtonText + '</a>' +\n                '</p>';\n            $.facebox(content);\n\n            // Bind Events\n            choice.bindEnterKey = true;\n            choice.staySelector = '#facebox .dirty-stay, #facebox .close, #facebox_overlay';\n            choice.proceedSelector = '#facebox .dirty-proceed';\n\n            if (choice.isDF1) {\n                var close = function (decision) {\n                    return function (e) {\n                        if (e.type !== 'keydown' || (e.type === 'keydown' && (e.which == 27 || e.which == 13))) {\n                            // Facebox hack: If we call close when returning from the stash, the\n                            // stash dialog will close, so we guard against calling close in that case. \n                            if (!$.DirtyForms.dialogStash) {\n                                $(document).trigger('close.facebox');\n                            }\n                            decision(e);\n                        }\n                    };\n                };\n                var decidingCancel = $.DirtyForms.decidingCancel;\n                $(document).bind('keydown.facebox', close(decidingCancel));\n                $(choice.staySelector).click(close(decidingCancel));\n                $(choice.proceedSelector).click(close($.DirtyForms.decidingContinue));\n            }\n        },\n        close: function (continuing, unstashing) {\n            // Facebox hack: If we call close when returning from the stash, the\n            // stash dialog will close, so we guard against calling close in that case. \n            if (!unstashing) {\n                $(document).trigger('close.facebox');\n            }\n        },\n        stash: function () {\n            var isDF1 = typeof $.DirtyForms.isDeciding === 'function',\n                $fb = $('#facebox'),\n                $content = $fb.find('.content');\n\n            // Store the DOM state as actual HTML DOM values\n            $content.find('datalist,select,textarea,input').not('[type=\"button\"],[type=\"submit\"],[type=\"reset\"],[type=\"image\"]').each(function () {\n                storeFieldValue($(this));\n            });\n\n            return ($.trim($fb.html()) === '' || $fb.css('display') != 'block') ?\n                false :\n                isDF1 ?\n                    $content.clone(true) :\n                    $content.children().clone(true);\n        },\n        unstash: function (stash, ev) {\n            $.facebox(stash);\n        },\n\n        // Support for Dirty Forms < 2.0\n        fire: function (message, title) {\n            this.title = title;\n            this.open({ isDF1: true }, message, $.DirtyForms.ignoreClass);\n        },\n        selector: $.DirtyForms.dialog.stashSelector,\n\n        // Support for Dirty Forms < 1.2\n        bind: function () {\n        },\n        refire: function (content, ev) {\n            this.unstash(content, ev);\n        }\n    };\n\n    var storeFieldValue = function ($field) {\n        if ($field.is('select,datalist')) {\n            $field.find('option').each(function () {\n                var $option = $(this);\n                if ($option.is(':selected')) {\n                    $option.attr('selected', 'selected');\n                } else {\n                    $option.removeAttr('selected');\n                }\n            });\n        } else if ($field.is(\":checkbox,:radio\")) {\n            if ($field.is(':checked')) {\n                $field.attr('checked', 'checked');\n            } else {\n                $field.removeAttr('checked');\n            }\n        } else if ($field.is('textarea')) {\n            $field.text($field.val());\n        } else {\n            $field.attr('value', $field.val());\n        }\n    };\n\n})(jQuery, window, document);\n"]}